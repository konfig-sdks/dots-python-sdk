# coding: utf-8

"""
    dots api

    Scalable and Flexible Payouts Infrastructure

    The version of the OpenAPI document: 1.0
    Contact: info@dots.dev
    Created by: https://dots.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dots_python_sdk import schemas  # noqa: F401


class PayoutLink(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.UUIDSchema
            created = schemas.DateTimeSchema
            link = schemas.StrSchema
            amount = schemas.NumberSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "sent": "SENT",
                        "claimed": "CLAIMED",
                        "delivery_pending": "DELIVERY_PENDING",
                        "delivery_failed": "DELIVERY_FAILED",
                        "delivered": "DELIVERED",
                        "canceled": "CANCELED",
                    }
                
                @schemas.classproperty
                def SENT(cls):
                    return cls("sent")
                
                @schemas.classproperty
                def CLAIMED(cls):
                    return cls("claimed")
                
                @schemas.classproperty
                def DELIVERY_PENDING(cls):
                    return cls("delivery_pending")
                
                @schemas.classproperty
                def DELIVERY_FAILED(cls):
                    return cls("delivery_failed")
                
                @schemas.classproperty
                def DELIVERED(cls):
                    return cls("delivered")
                
                @schemas.classproperty
                def CANCELED(cls):
                    return cls("canceled")
        
            @staticmethod
            def payee() -> typing.Type['PayoutLinkPayee']:
                return PayoutLinkPayee
        
            @staticmethod
            def delivery() -> typing.Type['PayoutLinkDelivery']:
                return PayoutLinkDelivery
            tax_exempt = schemas.BoolSchema
            claimed_user_id = schemas.UUIDSchema
            flow_id = schemas.UUIDSchema
            metadata = schemas.AnyTypeSchema
            __annotations__ = {
                "id": id,
                "created": created,
                "link": link,
                "amount": amount,
                "status": status,
                "payee": payee,
                "delivery": delivery,
                "tax_exempt": tax_exempt,
                "claimed_user_id": claimed_user_id,
                "flow_id": flow_id,
                "metadata": metadata,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payee"]) -> 'PayoutLinkPayee': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delivery"]) -> 'PayoutLinkDelivery': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_exempt"]) -> MetaOapg.properties.tax_exempt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["claimed_user_id"]) -> MetaOapg.properties.claimed_user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flow_id"]) -> MetaOapg.properties.flow_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "created", "link", "amount", "status", "payee", "delivery", "tax_exempt", "claimed_user_id", "flow_id", "metadata", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> typing.Union[MetaOapg.properties.link, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payee"]) -> typing.Union['PayoutLinkPayee', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delivery"]) -> typing.Union['PayoutLinkDelivery', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_exempt"]) -> typing.Union[MetaOapg.properties.tax_exempt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["claimed_user_id"]) -> typing.Union[MetaOapg.properties.claimed_user_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flow_id"]) -> typing.Union[MetaOapg.properties.flow_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "created", "link", "amount", "status", "payee", "delivery", "tax_exempt", "claimed_user_id", "flow_id", "metadata", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        created: typing.Union[MetaOapg.properties.created, str, datetime, schemas.Unset] = schemas.unset,
        link: typing.Union[MetaOapg.properties.link, str, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        payee: typing.Union['PayoutLinkPayee', schemas.Unset] = schemas.unset,
        delivery: typing.Union['PayoutLinkDelivery', schemas.Unset] = schemas.unset,
        tax_exempt: typing.Union[MetaOapg.properties.tax_exempt, bool, schemas.Unset] = schemas.unset,
        claimed_user_id: typing.Union[MetaOapg.properties.claimed_user_id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        flow_id: typing.Union[MetaOapg.properties.flow_id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayoutLink':
        return super().__new__(
            cls,
            *args,
            id=id,
            created=created,
            link=link,
            amount=amount,
            status=status,
            payee=payee,
            delivery=delivery,
            tax_exempt=tax_exempt,
            claimed_user_id=claimed_user_id,
            flow_id=flow_id,
            metadata=metadata,
            _configuration=_configuration,
            **kwargs,
        )

from dots_python_sdk.model.payout_link_delivery import PayoutLinkDelivery
from dots_python_sdk.model.payout_link_payee import PayoutLinkPayee
