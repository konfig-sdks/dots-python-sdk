# coding: utf-8

"""
    dots api

    Scalable and Flexible Payouts Infrastructure

    The version of the OpenAPI document: 1.0
    Contact: info@dots.dev
    Created by: https://dots.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dots_python_sdk import schemas  # noqa: F401


class RefundsCreateRefundRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "amount",
            "payment_intent_id",
        }
        
        class properties:
            amount = schemas.IntSchema
            payment_intent_id = schemas.UUIDSchema
            
            
            class reason(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "duplicate": "DUPLICATE",
                        "fraudulent": "FRAUDULENT",
                        "requested_by_customer": "REQUESTED_BY_CUSTOMER",
                        "expired_uncaptured_charge": "EXPIRED_UNCAPTURED_CHARGE",
                        "partial_capture": "PARTIAL_CAPTURE",
                    }
                
                @schemas.classproperty
                def DUPLICATE(cls):
                    return cls("duplicate")
                
                @schemas.classproperty
                def FRAUDULENT(cls):
                    return cls("fraudulent")
                
                @schemas.classproperty
                def REQUESTED_BY_CUSTOMER(cls):
                    return cls("requested_by_customer")
                
                @schemas.classproperty
                def EXPIRED_UNCAPTURED_CHARGE(cls):
                    return cls("expired_uncaptured_charge")
                
                @schemas.classproperty
                def PARTIAL_CAPTURE(cls):
                    return cls("partial_capture")
            metadata = schemas.BoolSchema
            __annotations__ = {
                "amount": amount,
                "payment_intent_id": payment_intent_id,
                "reason": reason,
                "metadata": metadata,
            }
    
    amount: MetaOapg.properties.amount
    payment_intent_id: MetaOapg.properties.payment_intent_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_intent_id"]) -> MetaOapg.properties.payment_intent_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["amount", "payment_intent_id", "reason", "metadata", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_intent_id"]) -> MetaOapg.properties.payment_intent_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amount", "payment_intent_id", "reason", "metadata", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, ],
        payment_intent_id: typing.Union[MetaOapg.properties.payment_intent_id, str, uuid.UUID, ],
        reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RefundsCreateRefundRequest':
        return super().__new__(
            cls,
            *args,
            amount=amount,
            payment_intent_id=payment_intent_id,
            reason=reason,
            metadata=metadata,
            _configuration=_configuration,
            **kwargs,
        )
