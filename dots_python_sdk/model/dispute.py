# coding: utf-8

"""
    dots api

    Scalable and Flexible Payouts Infrastructure

    The version of the OpenAPI document: 1.0
    Contact: info@dots.dev
    Created by: https://dots.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dots_python_sdk import schemas  # noqa: F401


class Dispute(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.UUIDSchema
            payment_intent_id = schemas.UUIDSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "needs_response": "NEEDS_RESPONSE",
                        "under_review": "UNDER_REVIEW",
                        "closed": "CLOSED",
                        "warning_needs_response": "WARNING_NEEDS_RESPONSE",
                        "warning_under_review": "WARNING_UNDER_REVIEW",
                        "warning_closed": "WARNING_CLOSED",
                        "won": "WON",
                        "lost": "LOST",
                    }
                
                @schemas.classproperty
                def NEEDS_RESPONSE(cls):
                    return cls("needs_response")
                
                @schemas.classproperty
                def UNDER_REVIEW(cls):
                    return cls("under_review")
                
                @schemas.classproperty
                def CLOSED(cls):
                    return cls("closed")
                
                @schemas.classproperty
                def WARNING_NEEDS_RESPONSE(cls):
                    return cls("warning_needs_response")
                
                @schemas.classproperty
                def WARNING_UNDER_REVIEW(cls):
                    return cls("warning_under_review")
                
                @schemas.classproperty
                def WARNING_CLOSED(cls):
                    return cls("warning_closed")
                
                @schemas.classproperty
                def WON(cls):
                    return cls("won")
                
                @schemas.classproperty
                def LOST(cls):
                    return cls("lost")
            
            
            class evidence(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DisputeFile']:
                        return DisputeFile
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['DisputeFile'], typing.List['DisputeFile']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'evidence':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DisputeFile':
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "payment_intent_id": payment_intent_id,
                "status": status,
                "evidence": evidence,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_intent_id"]) -> MetaOapg.properties.payment_intent_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["evidence"]) -> MetaOapg.properties.evidence: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "payment_intent_id", "status", "evidence", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_intent_id"]) -> typing.Union[MetaOapg.properties.payment_intent_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["evidence"]) -> typing.Union[MetaOapg.properties.evidence, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "payment_intent_id", "status", "evidence", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        payment_intent_id: typing.Union[MetaOapg.properties.payment_intent_id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        evidence: typing.Union[MetaOapg.properties.evidence, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Dispute':
        return super().__new__(
            cls,
            *args,
            id=id,
            payment_intent_id=payment_intent_id,
            status=status,
            evidence=evidence,
            _configuration=_configuration,
            **kwargs,
        )

from dots_python_sdk.model.dispute_file import DisputeFile
