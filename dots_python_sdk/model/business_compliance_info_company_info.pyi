# coding: utf-8

"""
    dots api

    Scalable and Flexible Payouts Infrastructure

    The version of the OpenAPI document: 1.0
    Contact: info@dots.dev
    Created by: https://dots.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dots_python_sdk import schemas  # noqa: F401


class BusinessComplianceInfoCompanyInfo(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "website",
            "incorporation_state",
            "name",
            "incorporation_type",
            "ein",
            "incorporation_date",
        }
        
        class properties:
            
            
            class ein(
                schemas.StrSchema
            ):
                pass
            incorporation_date = schemas.DateSchema
            incorporation_state = schemas.StrSchema
            
            
            class incorporation_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def SOLE_PROPRIETORSHIP(cls):
                    return cls("sole_proprietorship")
                
                @schemas.classproperty
                def PARTNERSHIP(cls):
                    return cls("partnership")
                
                @schemas.classproperty
                def LLC(cls):
                    return cls("llc")
                
                @schemas.classproperty
                def C_CORPORATION(cls):
                    return cls("c_corporation")
                
                @schemas.classproperty
                def S_CORPORATION(cls):
                    return cls("s_corporation")
            
            
            class name(
                schemas.StrSchema
            ):
                pass
            
            
            class website(
                schemas.StrSchema
            ):
                pass
            
            
            class dba(
                schemas.StrSchema
            ):
                pass
            __annotations__ = {
                "ein": ein,
                "incorporation_date": incorporation_date,
                "incorporation_state": incorporation_state,
                "incorporation_type": incorporation_type,
                "name": name,
                "website": website,
                "dba": dba,
            }
    
    website: MetaOapg.properties.website
    incorporation_state: MetaOapg.properties.incorporation_state
    name: MetaOapg.properties.name
    incorporation_type: MetaOapg.properties.incorporation_type
    ein: MetaOapg.properties.ein
    incorporation_date: MetaOapg.properties.incorporation_date
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ein"]) -> MetaOapg.properties.ein: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["incorporation_date"]) -> MetaOapg.properties.incorporation_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["incorporation_state"]) -> MetaOapg.properties.incorporation_state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["incorporation_type"]) -> MetaOapg.properties.incorporation_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["website"]) -> MetaOapg.properties.website: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dba"]) -> MetaOapg.properties.dba: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ein", "incorporation_date", "incorporation_state", "incorporation_type", "name", "website", "dba", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ein"]) -> MetaOapg.properties.ein: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["incorporation_date"]) -> MetaOapg.properties.incorporation_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["incorporation_state"]) -> MetaOapg.properties.incorporation_state: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["incorporation_type"]) -> MetaOapg.properties.incorporation_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["website"]) -> MetaOapg.properties.website: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dba"]) -> typing.Union[MetaOapg.properties.dba, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ein", "incorporation_date", "incorporation_state", "incorporation_type", "name", "website", "dba", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        website: typing.Union[MetaOapg.properties.website, str, ],
        incorporation_state: typing.Union[MetaOapg.properties.incorporation_state, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        incorporation_type: typing.Union[MetaOapg.properties.incorporation_type, str, ],
        ein: typing.Union[MetaOapg.properties.ein, str, ],
        incorporation_date: typing.Union[MetaOapg.properties.incorporation_date, str, date, ],
        dba: typing.Union[MetaOapg.properties.dba, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BusinessComplianceInfoCompanyInfo':
        return super().__new__(
            cls,
            *args,
            website=website,
            incorporation_state=incorporation_state,
            name=name,
            incorporation_type=incorporation_type,
            ein=ein,
            incorporation_date=incorporation_date,
            dba=dba,
            _configuration=_configuration,
            **kwargs,
        )
