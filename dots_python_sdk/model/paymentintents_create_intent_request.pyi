# coding: utf-8

"""
    dots api

    Scalable and Flexible Payouts Infrastructure

    The version of the OpenAPI document: 1.0
    Contact: info@dots.dev
    Created by: https://dots.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dots_python_sdk import schemas  # noqa: F401


class PaymentintentsCreateIntentRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "amount",
            "currency",
        }
        
        class properties:
            amount = schemas.IntSchema
            
            
            class currency(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def USD(cls):
                    return cls("usd")
            description = schemas.StrSchema
            confirm = schemas.BoolSchema
            user_id = schemas.UUIDSchema
            customer_id = schemas.UUIDSchema
            payment_method_id = schemas.UUIDSchema
        
            @staticmethod
            def payment_method_types() -> typing.Type['PaymentintentsCreateIntentRequestPaymentMethodTypes']:
                return PaymentintentsCreateIntentRequestPaymentMethodTypes
            
            
            class setup_future_usage(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ON_SESSION(cls):
                    return cls("on_session")
            metadata = schemas.BoolSchema
        
            @staticmethod
            def transfer_data() -> typing.Type['PaymentintentsCreateIntentRequestTransferData']:
                return PaymentintentsCreateIntentRequestTransferData
            
            
            class application_fee_amount(
                schemas.IntSchema
            ):
                pass
            __annotations__ = {
                "amount": amount,
                "currency": currency,
                "description": description,
                "confirm": confirm,
                "user_id": user_id,
                "customer_id": customer_id,
                "payment_method_id": payment_method_id,
                "payment_method_types": payment_method_types,
                "setup_future_usage": setup_future_usage,
                "metadata": metadata,
                "transfer_data": transfer_data,
                "application_fee_amount": application_fee_amount,
            }
    
    amount: MetaOapg.properties.amount
    currency: MetaOapg.properties.currency
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["confirm"]) -> MetaOapg.properties.confirm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customer_id"]) -> MetaOapg.properties.customer_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_method_id"]) -> MetaOapg.properties.payment_method_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_method_types"]) -> 'PaymentintentsCreateIntentRequestPaymentMethodTypes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["setup_future_usage"]) -> MetaOapg.properties.setup_future_usage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transfer_data"]) -> 'PaymentintentsCreateIntentRequestTransferData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["application_fee_amount"]) -> MetaOapg.properties.application_fee_amount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["amount", "currency", "description", "confirm", "user_id", "customer_id", "payment_method_id", "payment_method_types", "setup_future_usage", "metadata", "transfer_data", "application_fee_amount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["confirm"]) -> typing.Union[MetaOapg.properties.confirm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> typing.Union[MetaOapg.properties.user_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customer_id"]) -> typing.Union[MetaOapg.properties.customer_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_method_id"]) -> typing.Union[MetaOapg.properties.payment_method_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_method_types"]) -> typing.Union['PaymentintentsCreateIntentRequestPaymentMethodTypes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["setup_future_usage"]) -> typing.Union[MetaOapg.properties.setup_future_usage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transfer_data"]) -> typing.Union['PaymentintentsCreateIntentRequestTransferData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["application_fee_amount"]) -> typing.Union[MetaOapg.properties.application_fee_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amount", "currency", "description", "confirm", "user_id", "customer_id", "payment_method_id", "payment_method_types", "setup_future_usage", "metadata", "transfer_data", "application_fee_amount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, ],
        currency: typing.Union[MetaOapg.properties.currency, str, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        confirm: typing.Union[MetaOapg.properties.confirm, bool, schemas.Unset] = schemas.unset,
        user_id: typing.Union[MetaOapg.properties.user_id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        customer_id: typing.Union[MetaOapg.properties.customer_id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        payment_method_id: typing.Union[MetaOapg.properties.payment_method_id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        payment_method_types: typing.Union['PaymentintentsCreateIntentRequestPaymentMethodTypes', schemas.Unset] = schemas.unset,
        setup_future_usage: typing.Union[MetaOapg.properties.setup_future_usage, str, schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, bool, schemas.Unset] = schemas.unset,
        transfer_data: typing.Union['PaymentintentsCreateIntentRequestTransferData', schemas.Unset] = schemas.unset,
        application_fee_amount: typing.Union[MetaOapg.properties.application_fee_amount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaymentintentsCreateIntentRequest':
        return super().__new__(
            cls,
            *args,
            amount=amount,
            currency=currency,
            description=description,
            confirm=confirm,
            user_id=user_id,
            customer_id=customer_id,
            payment_method_id=payment_method_id,
            payment_method_types=payment_method_types,
            setup_future_usage=setup_future_usage,
            metadata=metadata,
            transfer_data=transfer_data,
            application_fee_amount=application_fee_amount,
            _configuration=_configuration,
            **kwargs,
        )

from dots_python_sdk.model.paymentintents_create_intent_request_payment_method_types import PaymentintentsCreateIntentRequestPaymentMethodTypes
from dots_python_sdk.model.paymentintents_create_intent_request_transfer_data import PaymentintentsCreateIntentRequestTransferData
