# coding: utf-8

"""
    dots api

    Scalable and Flexible Payouts Infrastructure

    The version of the OpenAPI document: 1.0
    Contact: info@dots.dev
    Created by: https://dots.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dots_python_sdk import schemas  # noqa: F401


class DisputeFile(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "customer_communications": "CUSTOMER_COMMUNICATIONS",
                        "refund_policy": "REFUND_POLICY",
                        "cancellation_policy": "CANCELLATION_POLICY",
                        "customer_signature": "CUSTOMER_SIGNATURE",
                        "receipt": "RECEIPT",
                        "service_documentation": "SERVICE_DOCUMENTATION",
                        "duplicate_charge_documentation": "DUPLICATE_CHARGE_DOCUMENTATION",
                        "shipping_documentation": "SHIPPING_DOCUMENTATION",
                        "uncategorized": "UNCATEGORIZED",
                    }
                
                @schemas.classproperty
                def CUSTOMER_COMMUNICATIONS(cls):
                    return cls("customer_communications")
                
                @schemas.classproperty
                def REFUND_POLICY(cls):
                    return cls("refund_policy")
                
                @schemas.classproperty
                def CANCELLATION_POLICY(cls):
                    return cls("cancellation_policy")
                
                @schemas.classproperty
                def CUSTOMER_SIGNATURE(cls):
                    return cls("customer_signature")
                
                @schemas.classproperty
                def RECEIPT(cls):
                    return cls("receipt")
                
                @schemas.classproperty
                def SERVICE_DOCUMENTATION(cls):
                    return cls("service_documentation")
                
                @schemas.classproperty
                def DUPLICATE_CHARGE_DOCUMENTATION(cls):
                    return cls("duplicate_charge_documentation")
                
                @schemas.classproperty
                def SHIPPING_DOCUMENTATION(cls):
                    return cls("shipping_documentation")
                
                @schemas.classproperty
                def UNCATEGORIZED(cls):
                    return cls("uncategorized")
            url = schemas.StrSchema
            __annotations__ = {
                "type": type,
                "url": url,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DisputeFile':
        return super().__new__(
            cls,
            *args,
            type=type,
            url=url,
            _configuration=_configuration,
            **kwargs,
        )
