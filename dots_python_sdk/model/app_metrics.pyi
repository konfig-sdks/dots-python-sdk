# coding: utf-8

"""
    dots api

    Scalable and Flexible Payouts Infrastructure

    The version of the OpenAPI document: 1.0
    Contact: info@dots.dev
    Created by: https://dots.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dots_python_sdk import schemas  # noqa: F401


class AppMetrics(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "connected_users",
            "wallet_balance",
            "money_out",
        }
        
        class properties:
            wallet_balance = schemas.StrSchema
            money_out = schemas.StrSchema
            connected_users = schemas.IntSchema
            __annotations__ = {
                "wallet_balance": wallet_balance,
                "money_out": money_out,
                "connected_users": connected_users,
            }
    
    connected_users: MetaOapg.properties.connected_users
    wallet_balance: MetaOapg.properties.wallet_balance
    money_out: MetaOapg.properties.money_out
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wallet_balance"]) -> MetaOapg.properties.wallet_balance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["money_out"]) -> MetaOapg.properties.money_out: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connected_users"]) -> MetaOapg.properties.connected_users: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["wallet_balance", "money_out", "connected_users", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wallet_balance"]) -> MetaOapg.properties.wallet_balance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["money_out"]) -> MetaOapg.properties.money_out: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connected_users"]) -> MetaOapg.properties.connected_users: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["wallet_balance", "money_out", "connected_users", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        connected_users: typing.Union[MetaOapg.properties.connected_users, decimal.Decimal, int, ],
        wallet_balance: typing.Union[MetaOapg.properties.wallet_balance, str, ],
        money_out: typing.Union[MetaOapg.properties.money_out, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AppMetrics':
        return super().__new__(
            cls,
            *args,
            connected_users=connected_users,
            wallet_balance=wallet_balance,
            money_out=money_out,
            _configuration=_configuration,
            **kwargs,
        )
