# coding: utf-8

"""
    dots api

    Scalable and Flexible Payouts Infrastructure

    The version of the OpenAPI document: 1.0
    Contact: info@dots.dev
    Created by: https://dots.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dots_python_sdk import schemas  # noqa: F401


class UsersUpdateUserObjectRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class default_payout_method(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def PAYPAL(cls):
                    return cls("paypal")
                
                @schemas.classproperty
                def VENMO(cls):
                    return cls("venmo")
                
                @schemas.classproperty
                def CASH_APP(cls):
                    return cls("cash_app")
                
                @schemas.classproperty
                def ACH(cls):
                    return cls("ach")
                
                @schemas.classproperty
                def INTL_BANK(cls):
                    return cls("intl_bank")
            auto_payout_enabled = schemas.BoolSchema
            metadata = schemas.AnyTypeSchema
            __annotations__ = {
                "default_payout_method": default_payout_method,
                "auto_payout_enabled": auto_payout_enabled,
                "metadata": metadata,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_payout_method"]) -> MetaOapg.properties.default_payout_method: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auto_payout_enabled"]) -> MetaOapg.properties.auto_payout_enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["default_payout_method", "auto_payout_enabled", "metadata", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_payout_method"]) -> typing.Union[MetaOapg.properties.default_payout_method, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auto_payout_enabled"]) -> typing.Union[MetaOapg.properties.auto_payout_enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["default_payout_method", "auto_payout_enabled", "metadata", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        default_payout_method: typing.Union[MetaOapg.properties.default_payout_method, str, schemas.Unset] = schemas.unset,
        auto_payout_enabled: typing.Union[MetaOapg.properties.auto_payout_enabled, bool, schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UsersUpdateUserObjectRequest':
        return super().__new__(
            cls,
            *args,
            default_payout_method=default_payout_method,
            auto_payout_enabled=auto_payout_enabled,
            metadata=metadata,
            _configuration=_configuration,
            **kwargs,
        )
