# coding: utf-8

"""
    dots api

    Scalable and Flexible Payouts Infrastructure

    The version of the OpenAPI document: 1.0
    Contact: info@dots.dev
    Created by: https://dots.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dots_python_sdk import schemas  # noqa: F401


class UsersSubmitComplianceInfoRequestW9(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    W-9 equivalent for users based in the United States.
    """


    class MetaOapg:
        required = {
            "address",
            "entity_type",
            "date_of_birth",
            "tin",
        }
        
        class properties:
            
            
            class entity_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "individual": "INDIVIDUAL",
                        "business": "BUSINESS",
                    }
                
                @schemas.classproperty
                def INDIVIDUAL(cls):
                    return cls("individual")
                
                @schemas.classproperty
                def BUSINESS(cls):
                    return cls("business")
            date_of_birth = schemas.DateSchema
            
            
            class tin(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 9
                    min_length = 9
        
            @staticmethod
            def address() -> typing.Type['UsersSubmitComplianceInfoRequestW9Address']:
                return UsersSubmitComplianceInfoRequestW9Address
            business_name = schemas.StrSchema
            first_name = schemas.StrSchema
            last_name = schemas.StrSchema
            __annotations__ = {
                "entity_type": entity_type,
                "date_of_birth": date_of_birth,
                "tin": tin,
                "address": address,
                "business_name": business_name,
                "first_name": first_name,
                "last_name": last_name,
            }
    
    address: 'UsersSubmitComplianceInfoRequestW9Address'
    entity_type: MetaOapg.properties.entity_type
    date_of_birth: MetaOapg.properties.date_of_birth
    tin: MetaOapg.properties.tin
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entity_type"]) -> MetaOapg.properties.entity_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_of_birth"]) -> MetaOapg.properties.date_of_birth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tin"]) -> MetaOapg.properties.tin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> 'UsersSubmitComplianceInfoRequestW9Address': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["business_name"]) -> MetaOapg.properties.business_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_name"]) -> MetaOapg.properties.first_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_name"]) -> MetaOapg.properties.last_name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["entity_type", "date_of_birth", "tin", "address", "business_name", "first_name", "last_name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entity_type"]) -> MetaOapg.properties.entity_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_of_birth"]) -> MetaOapg.properties.date_of_birth: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tin"]) -> MetaOapg.properties.tin: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> 'UsersSubmitComplianceInfoRequestW9Address': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["business_name"]) -> typing.Union[MetaOapg.properties.business_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_name"]) -> typing.Union[MetaOapg.properties.first_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_name"]) -> typing.Union[MetaOapg.properties.last_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["entity_type", "date_of_birth", "tin", "address", "business_name", "first_name", "last_name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        address: 'UsersSubmitComplianceInfoRequestW9Address',
        entity_type: typing.Union[MetaOapg.properties.entity_type, str, ],
        date_of_birth: typing.Union[MetaOapg.properties.date_of_birth, str, date, ],
        tin: typing.Union[MetaOapg.properties.tin, str, ],
        business_name: typing.Union[MetaOapg.properties.business_name, str, schemas.Unset] = schemas.unset,
        first_name: typing.Union[MetaOapg.properties.first_name, str, schemas.Unset] = schemas.unset,
        last_name: typing.Union[MetaOapg.properties.last_name, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UsersSubmitComplianceInfoRequestW9':
        return super().__new__(
            cls,
            *args,
            address=address,
            entity_type=entity_type,
            date_of_birth=date_of_birth,
            tin=tin,
            business_name=business_name,
            first_name=first_name,
            last_name=last_name,
            _configuration=_configuration,
            **kwargs,
        )

from dots_python_sdk.model.users_submit_compliance_info_request_w9_address import UsersSubmitComplianceInfoRequestW9Address
