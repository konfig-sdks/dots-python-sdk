# coding: utf-8

"""
    dots api

    Scalable and Flexible Payouts Infrastructure

    The version of the OpenAPI document: 1.0
    Contact: info@dots.dev
    Created by: https://dots.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dots_python_sdk import schemas  # noqa: F401


class PaymentIntent(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "amount",
            "currency",
            "id",
        }
        
        class properties:
            id = schemas.UUIDSchema
            
            
            class amount(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_minimum = 0
            
            
            class currency(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "usd": "USD",
                    }
                
                @schemas.classproperty
                def USD(cls):
                    return cls("usd")
            user_id = schemas.UUIDSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "initialized": "INITIALIZED",
                        "created": "CREATED",
                        "requires_payment_method": "REQUIRES_PAYMENT_METHOD",
                        "requires_confirmation": "REQUIRES_CONFIRMATION",
                        "requires_action": "REQUIRES_ACTION",
                        "processing": "PROCESSING",
                        "succeeded": "SUCCEEDED",
                        "requires_capture": "REQUIRES_CAPTURE",
                        "canceled": "CANCELED",
                        "failed": "FAILED",
                    }
                
                @schemas.classproperty
                def INITIALIZED(cls):
                    return cls("initialized")
                
                @schemas.classproperty
                def CREATED(cls):
                    return cls("created")
                
                @schemas.classproperty
                def REQUIRES_PAYMENT_METHOD(cls):
                    return cls("requires_payment_method")
                
                @schemas.classproperty
                def REQUIRES_CONFIRMATION(cls):
                    return cls("requires_confirmation")
                
                @schemas.classproperty
                def REQUIRES_ACTION(cls):
                    return cls("requires_action")
                
                @schemas.classproperty
                def PROCESSING(cls):
                    return cls("processing")
                
                @schemas.classproperty
                def SUCCEEDED(cls):
                    return cls("succeeded")
                
                @schemas.classproperty
                def REQUIRES_CAPTURE(cls):
                    return cls("requires_capture")
                
                @schemas.classproperty
                def CANCELED(cls):
                    return cls("canceled")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("failed")
            transfer_id = schemas.UUIDSchema
            payment_method_id = schemas.UUIDSchema
            metadata = schemas.AnyTypeSchema
            client_secret = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "amount": amount,
                "currency": currency,
                "user_id": user_id,
                "status": status,
                "transfer_id": transfer_id,
                "payment_method_id": payment_method_id,
                "metadata": metadata,
                "client_secret": client_secret,
            }
    
    amount: MetaOapg.properties.amount
    currency: MetaOapg.properties.currency
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transfer_id"]) -> MetaOapg.properties.transfer_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_method_id"]) -> MetaOapg.properties.payment_method_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_secret"]) -> MetaOapg.properties.client_secret: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "amount", "currency", "user_id", "status", "transfer_id", "payment_method_id", "metadata", "client_secret", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> typing.Union[MetaOapg.properties.user_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transfer_id"]) -> typing.Union[MetaOapg.properties.transfer_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_method_id"]) -> typing.Union[MetaOapg.properties.payment_method_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_secret"]) -> typing.Union[MetaOapg.properties.client_secret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "amount", "currency", "user_id", "status", "transfer_id", "payment_method_id", "metadata", "client_secret", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, ],
        currency: typing.Union[MetaOapg.properties.currency, str, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        user_id: typing.Union[MetaOapg.properties.user_id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        transfer_id: typing.Union[MetaOapg.properties.transfer_id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        payment_method_id: typing.Union[MetaOapg.properties.payment_method_id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        client_secret: typing.Union[MetaOapg.properties.client_secret, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaymentIntent':
        return super().__new__(
            cls,
            *args,
            amount=amount,
            currency=currency,
            id=id,
            user_id=user_id,
            status=status,
            transfer_id=transfer_id,
            payment_method_id=payment_method_id,
            metadata=metadata,
            client_secret=client_secret,
            _configuration=_configuration,
            **kwargs,
        )
