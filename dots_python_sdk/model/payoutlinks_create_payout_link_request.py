# coding: utf-8

"""
    dots api

    Scalable and Flexible Payouts Infrastructure

    The version of the OpenAPI document: 1.0
    Contact: info@dots.dev
    Created by: https://dots.dev
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dots_python_sdk import schemas  # noqa: F401


class PayoutlinksCreatePayoutLinkRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "amount",
        }
        
        class properties:
            amount = schemas.IntSchema
            user_id = schemas.UUIDSchema
        
            @staticmethod
            def payee() -> typing.Type['PayoutlinksCreatePayoutLinkRequestPayee']:
                return PayoutlinksCreatePayoutLinkRequestPayee
        
            @staticmethod
            def delivery() -> typing.Type['PayoutlinksCreatePayoutLinkRequestDelivery']:
                return PayoutlinksCreatePayoutLinkRequestDelivery
            force_collect_compliance_information = schemas.BoolSchema
            tax_exempt = schemas.BoolSchema
            metadata = schemas.AnyTypeSchema
            memo = schemas.StrSchema
            
            
            class idempotency_key(
                schemas.UUIDBase,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'uuid'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'idempotency_key':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class payout_fee_party(
                schemas.EnumBase,
                schemas.UUIDSchema
            ):
            
            
                class MetaOapg:
                    format = 'uuid'
                    enum_value_to_name = {
                        "user": "USER",
                        "platform": "PLATFORM",
                    }
                
                @schemas.classproperty
                def USER(cls):
                    return cls("user")
                
                @schemas.classproperty
                def PLATFORM(cls):
                    return cls("platform")
        
            @staticmethod
            def additional_steps() -> typing.Type['PayoutlinksCreatePayoutLinkRequestAdditionalSteps']:
                return PayoutlinksCreatePayoutLinkRequestAdditionalSteps
            __annotations__ = {
                "amount": amount,
                "user_id": user_id,
                "payee": payee,
                "delivery": delivery,
                "force_collect_compliance_information": force_collect_compliance_information,
                "tax_exempt": tax_exempt,
                "metadata": metadata,
                "memo": memo,
                "idempotency_key": idempotency_key,
                "payout_fee_party": payout_fee_party,
                "additional_steps": additional_steps,
            }
    
    amount: MetaOapg.properties.amount
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payee"]) -> 'PayoutlinksCreatePayoutLinkRequestPayee': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delivery"]) -> 'PayoutlinksCreatePayoutLinkRequestDelivery': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["force_collect_compliance_information"]) -> MetaOapg.properties.force_collect_compliance_information: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_exempt"]) -> MetaOapg.properties.tax_exempt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memo"]) -> MetaOapg.properties.memo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idempotency_key"]) -> MetaOapg.properties.idempotency_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payout_fee_party"]) -> MetaOapg.properties.payout_fee_party: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additional_steps"]) -> 'PayoutlinksCreatePayoutLinkRequestAdditionalSteps': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["amount", "user_id", "payee", "delivery", "force_collect_compliance_information", "tax_exempt", "metadata", "memo", "idempotency_key", "payout_fee_party", "additional_steps", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> typing.Union[MetaOapg.properties.user_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payee"]) -> typing.Union['PayoutlinksCreatePayoutLinkRequestPayee', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delivery"]) -> typing.Union['PayoutlinksCreatePayoutLinkRequestDelivery', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["force_collect_compliance_information"]) -> typing.Union[MetaOapg.properties.force_collect_compliance_information, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_exempt"]) -> typing.Union[MetaOapg.properties.tax_exempt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memo"]) -> typing.Union[MetaOapg.properties.memo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idempotency_key"]) -> typing.Union[MetaOapg.properties.idempotency_key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payout_fee_party"]) -> typing.Union[MetaOapg.properties.payout_fee_party, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additional_steps"]) -> typing.Union['PayoutlinksCreatePayoutLinkRequestAdditionalSteps', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amount", "user_id", "payee", "delivery", "force_collect_compliance_information", "tax_exempt", "metadata", "memo", "idempotency_key", "payout_fee_party", "additional_steps", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, ],
        user_id: typing.Union[MetaOapg.properties.user_id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        payee: typing.Union['PayoutlinksCreatePayoutLinkRequestPayee', schemas.Unset] = schemas.unset,
        delivery: typing.Union['PayoutlinksCreatePayoutLinkRequestDelivery', schemas.Unset] = schemas.unset,
        force_collect_compliance_information: typing.Union[MetaOapg.properties.force_collect_compliance_information, bool, schemas.Unset] = schemas.unset,
        tax_exempt: typing.Union[MetaOapg.properties.tax_exempt, bool, schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        memo: typing.Union[MetaOapg.properties.memo, str, schemas.Unset] = schemas.unset,
        idempotency_key: typing.Union[MetaOapg.properties.idempotency_key, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        payout_fee_party: typing.Union[MetaOapg.properties.payout_fee_party, str, uuid.UUID, schemas.Unset] = schemas.unset,
        additional_steps: typing.Union['PayoutlinksCreatePayoutLinkRequestAdditionalSteps', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayoutlinksCreatePayoutLinkRequest':
        return super().__new__(
            cls,
            *args,
            amount=amount,
            user_id=user_id,
            payee=payee,
            delivery=delivery,
            force_collect_compliance_information=force_collect_compliance_information,
            tax_exempt=tax_exempt,
            metadata=metadata,
            memo=memo,
            idempotency_key=idempotency_key,
            payout_fee_party=payout_fee_party,
            additional_steps=additional_steps,
            _configuration=_configuration,
            **kwargs,
        )

from dots_python_sdk.model.payoutlinks_create_payout_link_request_additional_steps import PayoutlinksCreatePayoutLinkRequestAdditionalSteps
from dots_python_sdk.model.payoutlinks_create_payout_link_request_delivery import PayoutlinksCreatePayoutLinkRequestDelivery
from dots_python_sdk.model.payoutlinks_create_payout_link_request_payee import PayoutlinksCreatePayoutLinkRequestPayee
